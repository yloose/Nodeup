name: Release new version
run-name: New version release triggered by @${{ github.actor }}


on:
  workflow_dispatch
  
  
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
       - uses: actions/checkout@v3
       
       - name: Read env variables
         run: echo VERSION=$(cat pom.xml | grep version | grep -o -P '(?<=<version>).*(?=</version>)') >> $GITHUB_ENV

       - name: Set up JDK 11
         uses: actions/setup-java@v3
         with:
          java-version: "11"
          distribution: "adopt"
      
       - name: Set up GCC
         uses: egor-tensin/setup-gcc@v1
         with:
          version: latest
          platform: x64
      
       - name: Install libpcap dependency
         run: sudo apt-get install -y libpcap-dev
         
       - name: Cache libnl aarch64 dependency
         id: cache-libnl
         uses: actions/cache@v3
         env:
            cache-name: cache-libnl
         with:
            path: |
              ~/cache/libnl/**/*
            key: ${{ runner.os }}-build-${{ env.cache-name }}
         
       - name: Cache libpcap aarch64 dependency
         id: cache-libpcap64bit
         uses: actions/cache@v3
         env:
            cache-name: cache-libpcap64bit
         with:
            path: |
              ~/cache/libpcap64bit/**/*
            key: ${{ runner.os }}-build-${{ env.cache-name }}
       
       - name: Cache libpcap armv7 dependency
         id: cache-libpcap32bit
         uses: actions/cache@v3
         env:
            cache-name: cache-libpcap32bit
         with:
            path: |
              ~/cache/libpcap32bit/**/*
            key: ${{ runner.os }}-build-${{ env.cache-name }}
            
       - name: Install aarch64 cross compiler suite
         run: sudo apt install gcc-aarch64-linux-gnu
         
       - name: Install armv7 cross compiler suite
         run: sudo apt install gcc-arm-linux-gnueabihf
            
       - name: Download and compile libnl aarch64
         if: ${{ steps.cache-libnl.outputs.cache-hit != 'true' }}
         run: |
           mkdir -p ~/tmp && cd ~/tmp && rm -rf ~/cache/libnl && mkdir -p ~/cache/libnl
           git clone https://github.com/thom311/libnl.git && cd libnl
           export CC=aarch64-linux-gnu-gcc
           /bin/sh ./autogen.sh
           /bin/sh ./configure --host=aarch64-linux-gnu --prefix=$HOME/cache/libnl
           make
           make install
           
       - name: Install libnl aarch64
         if: ${{ steps.cache-libpcap64bit.outputs.cache-hit != 'true' }}
         run: |
           cd ~/cache/libnl
           sudo cp -r ./include/* /usr/aarch64-linux-gnu/include/
           sudo cp -r ./lib/* /usr/aarch64-linux-gnu/lib/
            
       - name: Download and compile libpcap aarch64
         if: ${{ steps.cache-libpcap64bit.outputs.cache-hit != 'true' }}
         run: |
           mkdir -p ~/tmp && cd ~/tmp && rm -rf ~/cache/libpcap64bit && mkdir -p ~/cache/libpcap64bit
           rm -rf ~/tmp/libpcap && git clone https://github.com/the-tcpdump-group/libpcap.git && cd libpcap
           export CC=aarch64-linux-gnu-gcc
           /bin/sh ./configure --host=aarch64-linux-gnu --with-pcap=linux --prefix=$HOME/cache/libpcap64bit CFLAGS="-I/usr/aarch64-linux-gnu/include/libnl3" LDFLAGS="-L/usr/aarch64-linux-gnu/lib" 
           make
           make install
           
       - name: Download and compile libpcap armv7
         if: ${{ steps.cache-libpcap32bit.outputs.cache-hit != 'true' }}
         continue-on-error: true
         run: |
           mkdir -p ~/tmp && cd ~/tmp && rm -rf ~/cache/libpcap32bit && mkdir -p ~/cache/libpcap32bit
           rm -rf ~/tmp/libpcap && git clone https://github.com/the-tcpdump-group/libpcap.git && cd libpcap
           export CC=arm-linux-gnueabihf-gcc
           /bin/sh ./configure --host=arm-linux --with-pcap=linux --prefix=$HOME/cache/libpcap32bit
           make
           make install
      
       - name: Build with maven for amd64
         run: mvn --batch-mode --update-snapshots -P updateConfigBuilder package -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
         
       - name: Maven clean nodeup-native
         run: mvn -pl native clean
         
       - name: Build with maven for aarch64
         run: mvn -e --batch-mode --update-snapshots -P aarch64 package -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
         
       - name: Maven clean nodeup-native
         run: mvn -pl native clean 
        
       - name: Build with maven for armv7
         run: mvn -e --batch-mode --update-snapshots -P armv7 package -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
         
       - name: Get libpcap.so's ready for upload.
         run: |
            cp -L ~/cache/libpcap32bit/lib/libpcap.so $GITHUB_WORKSPACE/target/libpcap-armv7.so
            cp -L ~/cache/libpcap64bit/lib/libpcap.so $GITHUB_WORKSPACE/target/libpcap-aarch64.so
            cp -L /usr/lib/libpcap.so $GITHUB_WORKSPACE/target/libpcap-amd64.so
         
       - name: Generate update config.xml
         run: java -jar ./updateConfigBuilder/target/update-config-builder-jar-with-dependencies.jar
         
       - name: Release new version
         uses: "marvinpinto/action-automatic-releases@latest"
         with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          automatic_release_tag: "latest"
          title: "Release build ${{ env.VERSION }}"
          files: |
            LICENSE.txt
            target/libpcap-*.so
            updateConfigBuilder/target/config*.xml
            server/target/nodeup-server*.jar
            bootstrap/target/nodeup-bootstrap.jar